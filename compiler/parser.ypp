%{
	/** Imports && Headers **/
	#ifndef COOL_H
	#include "compiler.h"
	#endif
%}
/** Sets bison's error generation to be verbose **/
%define parse.error verbose
/** Define start of a cool program **/
%start program

/** Token List **/
%token UMIN
%token MULT
%token DIV
%token ADD
%token SUB
%token ID
%token EXM
%token THIS
%token SUPER
%token OVERRIDE
%token NULLVAL
%token NATIVE
%token EXTENDS
%token IF
%token ELSE
%token WHILE
%token MATCH
%token CASE
%token STRING
%token INTEGER
%token BOOL
%token CLASS
%token TYPE
%token SEMICOLON
%token COLON
%token EQEQ
%token LTEQ
%token LT
%token EQ
%token NEW
%token DEF
%token PAR_OPEN
%token PAR_CLOSE
%token BRACE_OPEN
%token BRACE_CLOSE
%token VAR
%token DOT
%token COMMA
%token ARROW

/** Precidence **/
%left EQ
%left IF WHILE
%left MATCH
%left LTEQ LT
%left EQEQ
%left ADD SUB
%left MULT DIV
%left EXM UMIN
%left DOT
%left ELSE
%left W

/** Declaration of different Nodes **/
%union {
	StringNode* string;
	IntNode* Int;
	BoolNode* Bool;
	Node* node;
	programNode* program;
	classdeclNode* classdecl;
	varformalsNode* varformals;
	varformNode* varform;
	classbodyNode* classbody;
	featuresNode* features;
	formalsNode* formals;
	formNode* form;
	actualsNode* actuals;
	actualNode* actual;
	blockNode* block;
	blockptNode* blockpt;
	exprNode* expr;
	casesNode* cases;
	casNode* cas;
}

/** Declaration of all non-terminals **/
%type <program> program
%type <classdecl> classdecl
%type <varformals> varformals
%type <varform> varform
%type <classbody> classbody
%type <features> features
%type <formals> formals
%type <form> form
%type <actuals> actuals
%type <actual> actual
%type <block> block
%type <blockpt> blockpt
%type <expr> expr
%type <cases> cases
%type <cas> cas

/** BISON GRAMMAR LOGIC **/
%%
program		: classdecls															{$$ = new programNode();}
			;

classdecls	: classdecl																{$$ = new classdeclsNode();}
			| classdecl classdecls													{$$ = new classdeclsNode();}
			;

classdecl  	: CLASS type varformals classbody										{}
			| CLASS type varformals EXTENDS type actuals classbody					{}
			| CLASS type varformals EXTENDS NATIVE classbody						{}
	        ;

varformals	: PAR_OPEN PAR_CLOSE													{}
			| PAR_OPEN varform PAR_CLOSE											{}
			;

varform		: VAR id COLON type														{}
			| varform COMMA VAR id COLON type 										{}
			;

classbody	: BRACE_OPEN features BRACE_CLOSE										{}
			;

features	: /* empty */															{}
			| features DEF id formals COLON type EQ expr SEMICOLON					{}
			| features OVERRIDE DEF id formals COLON type EQ expr SEMICOLON			{}
			| features DEF id formals COLON type EQ NATIVE SEMICOLON				{}
			| features OVERRIDE DEF id formals COLON type EQ NATIVE SEMICOLON		{}
			| features VAR id EQ NATIVE SEMICOLON									{}
			| features VAR id COLON type COLON expr SEMICOLON						{}
			| features BRACE_OPEN block BRACE_CLOSE SEMICOLON						{}
			;

formals		: PAR_OPEN PAR_CLOSE													{}
			| PAR_OPEN form PAR_CLOSE												{}
			;

form 		: id COLON type															{}
			| form COMMA id COLON type 												{}
			;

actuals		: PAR_OPEN PAR_CLOSE													{}
			| PAR_OPEN actual PAR_CLOSE												{}
			;

actual 		: expr																	{}
			| actual COMMA expr 													{}
			;

block 		: /* empty */															{}
			| expr																	{}
			| blockpt																{}
			;

blockpt		: expr SEMICOLON expr													{}
			| expr SEMICOLON blockpt												{}
			| VAR id COLON type EQ expr SEMICOLON expr								{}
			| VAR id COLON type EQ expr SEMICOLON blockpt							{}
			;

id			: ID																	{}
			;

type		: TYPE																	{}
			;

expr		: id EQ expr															{}
			| EXM expr																{}
			| SUB expr %prec UMIN													{}
			| IF PAR_OPEN expr PAR_CLOSE expr ELSE expr %prec W						{}
			| WHILE PAR_OPEN expr PAR_CLOSE expr %prec W							{}
			| SUPER DOT id actuals													{}
			| id actuals															{}
			| NEW type actuals														{}
			| BRACE_OPEN block BRACE_CLOSE											{}
			| PAR_OPEN expr PAR_CLOSE												{}
			| expr DOT id actuals													{}
			| expr MATCH cases														{}
			| expr LTEQ expr 														{}
			| expr LT expr															{}
			| expr EQEQ expr														{}
			| expr MULT expr														{}
			| expr DIV expr															{}
			| expr ADD expr															{}
			| expr SUB expr															{}
			| NULLVAL																{}
			| PAR_OPEN PAR_CLOSE													{}
			| id																	{}
			| INTEGER																{}
			| STRING																{}
			| BOOL																	{}
			| THIS																	{}
			;

cases		: BRACE_OPEN cas BRACE_CLOSE 											{}
			;

cas 		: CASE id COLON type ARROW block										{}
			| cas CASE id COLON type ARROW block									{}
			| CASE NULLVAL ARROW block 												{}
			| cas CASE NULLVAL ARROW block											{}
			;
%%
