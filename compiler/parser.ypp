%{
	#ifndef COOL_H
	#include "compiler.h"
	#endif

	//extern "C" int yylex (void);
	//int yylex(void);
	void yyerror(const char *);
%}

%define parse.error verbose

%start program

%token UMIN MULT DIV ADD SUB ID EXM THIS SUPER OVERRIDE NULLVAL NATIVE EXTENDS IF ELSE WHILE MATCH CASE STRING INTEGER BOOL CLASS TYPE SEMICOLON COLON EQEQ LTEQ LT NEQ EQ NEW DEF PAR_OPEN PAR_CLOSE BRACE_OPEN BRACE_CLOSE VAR DOT COMMA ARROW

%left	EQ
%left	IF WHILE
%left	MATCH
%left	LTEQ LT
%left	EQEQ
%left	ADD SUB
%left	MULT DIV
%left	EXM UMIN
%left	DOT

%union {
	StringNode* string;
	IntNode* Int;
	BoolNode* Bool;
	Node* node;
	programNode* program;
	classdeclNode* classdecl;
	varformalsNode* varformals;
	varformNode* varform;
	classbodyNode* classbody;
	featuresNode* features;
	featureNode* feature;
	formalsNode* formals;
	formNode* form;
	actualsNode* actuals;
	actualNode* actual;
	blockNode* block;
	blockptNode* blockpt;
	exprNode* expr;
	exNode* ex;
	expNode* exp;
	primaryNode* primary;
	casesNode* cases;
	casNode* cas;
}

%type <program> program
%type <classdecl> classdecl
%type <varformals> varformals
%type <varform> varform
%type <classbody> classbody
%type <features> features
%type <feature> feature
%type <formals> formals
%type <form> form
%type <actuals> actuals
%type <actual> actual
%type <block> block
%type <blockpt> blockpt
%type <expr> expr
%type <ex> ex
%type <exp> exp
%type <primary> primary
%type <cases> cases
%type <cas> cas


/** TODO:
 * Create class "Node()", FILL ZEH FILEZ
 * %union, valid values ^^
 * Create tables (Vectors), id's; int's; string's.
 */

%%
		
program		: classdecls													{}
			;

classdecls	: classdecl														{}
			| classdecl classdecls											{}
			;

classdecl  	: CLASS TYPE varformals classbody								{}
			| CLASS TYPE varformals EXTENDS TYPE actuals classbody			{}
			| CLASS TYPE varformals EXTENDS NATIVE classbody				{}
	        ;

varformals	: PAR_OPEN PAR_CLOSE											{}
			| PAR_OPEN varform PAR_CLOSE									{}
			;

varform		: VAR ID COLON TYPE												{}
			| VAR ID COLON TYPE COMMA varform 								{}
			;

classbody	: BRACE_OPEN BRACE_CLOSE										{}
			| BRACE_OPEN features BRACE_CLOSE								{}
			;

features	: feature 														{}
			| feature features 												{}
			;

feature 	: DEF ID formals COLON TYPE EQ expr SEMICOLON					{}
			| OVERRIDE DEF ID formals COLON TYPE EQ expr SEMICOLON			{}
			| DEF ID formals COLON TYPE EQ NATIVE SEMICOLON					{}
			| OVERRIDE DEF ID formals COLON TYPE EQ NATIVE SEMICOLON		{}
			| VAR ID EQ NATIVE SEMICOLON									{}
			| VAR ID COLON TYPE COLON expr SEMICOLON						{}
			| BRACE_OPEN block BRACE_CLOSE SEMICOLON						{}
			;
	
formals		: PAR_OPEN PAR_CLOSE											{}
			| PAR_OPEN form PAR_CLOSE										{}
			;

form 		: ID COLON TYPE													{}
			| ID COLON TYPE COMMA form 										{}
			;

actuals		: PAR_OPEN PAR_CLOSE											{}
			| PAR_OPEN actual PAR_CLOSE										{}
			;

actual 		: expr															{}
			| expr COMMA actual 											{}
			;

block 		: /* empty */													{}
			| expr															{}
			| blockpt														{}
			;

blockpt		: expr SEMICOLON												{}
			| expr SEMICOLON blockpt										{}
			| VAR ID COLON TYPE EQ expr SEMICOLON 							{}
			| VAR ID COLON TYPE EQ expr SEMICOLON blockpt					{}
			;

expr		: primary exp													{}
			| ex primary													{}
			| ex primary exp 												{}
			;

ex 			: ID EQ 														{}
			| ID EQ ex 														{}
			| EXM 															{}
			| EXM ex 														{}
			| SUB %prec UMIN 												{}
			| SUB ex %prec UMIN 											{}
			| IF PAR_OPEN expr PAR_CLOSE expr ELSE	 						{}
			| IF PAR_OPEN expr PAR_CLOSE expr ELSE ex 						{}
			| WHILE PAR_OPEN expr PAR_CLOSE 								{}
			| WHILE PAR_OPEN expr PAR_CLOSE ex 								{}
			;

exp			: LTEQ expr		 												{}
			| LTEQ expr exp	 												{}
			| LT expr	 													{}
			| LT expr exp 													{}
			| EQEQ expr		 												{}
			| EQEQ expr exp 												{}
			| NEQ expr														{}
			| NEQ expr exp													{}
			| MULT expr		 												{}
			| MULT expr exp 												{}
			| DIV expr	 													{}
			| DIV expr exp 													{}
			| ADD expr	 													{}
			| ADD expr exp 													{}
			| SUB expr	 													{}
			| SUB expr exp 													{}
			| MATCH cases	 												{}
			| MATCH cases exp 												{}
			| DOT ID actuals 												{}
			| DOT ID actuals exp											{}
			;

primary		: ID actuals 													{}
			| SUPER DOT ID actuals											{}
			| NEW TYPE actuals												{}
			| BRACE_OPEN block BRACE_CLOSE 									{}
			| PAR_OPEN expr PAR_CLOSE										{}
			| NULLVAL														{}
			| PAR_OPEN PAR_CLOSE											{}
			| ID 															{}
			| INTEGER 														{}
			| STRING 														{}
			| BOOL	 														{}
			| THIS 															{}
			;

cases		: BRACE_OPEN cas BRACE_CLOSE 									{}
			;

cas 		: CASE ID COLON TYPE ARROW block								{}
			| CASE ID COLON TYPE ARROW block cas							{}
			| CASE NULLVAL ARROW block 										{}
			| CASE NULLVAL ARROW block cas									{}
			;


%%
