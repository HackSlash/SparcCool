#!/usr/bin/env python2

import re,inspect,sys,getopt

scriptname = inspect.getfile(inspect.currentframe())
bison_start = False
infilename  = 'parser.ypp'
outfilename = 'tree_gen.h'

def proc_line(line):
	global bison_start
	if re.match(r"%%\W+", line): bison_start = not bison_start
	elif bison_start == True:
		match = re.search(r'(\w*)(?=\s+:)',line)
		if match: return match.group(0)

try:
	opts, args = getopt.getopt(sys.argv[1:],"hi:o:",["infile=","outfile="])
except getopt.GetoptError:
	print "%s -i <inputfile> -o <outputfile>" % scriptname
	sys.exit(2)
for opt, arg in opts:
	if opt == '-h':
		print "%s -i <inputfile> -o <outputfile>" % scriptname
		sys.exit()
	elif opt in ("-i", "--infile"):
		infilename = arg
	elif opt in ("-o", "--outfile"):
		outfilename = arg

with open(infilename) as infile:
	nondets = map(proc_line,infile)
	nondets = filter(lambda x: x != None, nondets)

with open(outfilename,'w') as outfile:
	print >> outfile, """#ifndef TREE_GEN_H
#define TREE_GEN_H

/*
 *	AUTOGENERATED FILE (created by %s)
 *	DO NOT EDIT!
 *
 *	Manual edits will be overwritten next compilation!
 *
 */""" % scriptname
	for nd in nondets:
		print >> outfile, """
class %sNode : public Node {
public:
	using Node::Node;
};""" % nd
	print >> outfile, "\n#endif //TREE_GEN_H"

print "Generated %d classes in %s from %s!" % (len(nondets), outfilename, infilename)